
\ Variables globales para el sistema
variable num-reglas \ Numero de reglas registradas
0 num-reglas !       \ Inicializar el numero de reglas a 0

create prioridades 10 cells allot \ Array para las prioridades
0 10 cells prioridades erase \ inicialitzar a zero
create condiciones 10 cells allot \ Array para las condiciones
0 10 cells condiciones erase
create acciones 10 cells allot    \ Array para las acciones
0 10 cells acciones erase
create mypad 15 allot  \ variable on guardar string counted de accept.

\ Palabra para registrar una regla automaticamente
: registrar-regla ( -- )
    \ Pedir la prioridad
    cr ." Introduce la prioridad de la regla (numero entero, menor es mas prioritario): " 
    pad 10 accept >r 0. pad r> >number 2drop drop \ Leer y convertir la prioridad a numero
   \ es podria substituir per : pad 10 accept pad swap number, que es mes curt.
    num-reglas @ cells prioridades + ! \ Guardar la direccion de la prioridad

    \ Pedir la condicion
    cr ." Introduce el nombre de la palabra Forth para la condicion (condicion1, condicion2, ...): " 
     pad 15 accept pad swap mypad place  \ (addr n --- c-addr) pasa a counting string
     mypad find \ Buscar la direccion de la palabra condicion, torna ( —- addr -1|0)
    0= if cr ." Palabra no encontrada." abort then \ Verificar si se encontro
    drop num-reglas @ cells condiciones + ! \ Guardar la direccion de la condicion

    \ Pedir la accion
    cr ." Introduce el nombre de la palabra Forth para la accion (accion1, accion2, ...): " 
    pad 15 accept pad swap mypad place
    mypad find \ Buscar la direccion de la palabra de accion
    0= if cr ." Palabra no encontrada." abort then \ Verificar si se encontro
    drop num-reglas @ cells acciones + ! \ Guardar la direcciÃ³n de la accion

    \ Incrementar el numero de reglas
    1 num-reglas +! 
    cr ." Regla registrada con exito." cr
;

\ Mostrar las reglas definidas
: mostrar-reglas ( -- )
    cr ." Reglas definidas: " cr
    num-reglas @ 1 max 0 do
        cr ." Regla " i 1 + . ." :"
        cr ."  Prioridad: " i cells prioridades + @ .
        cr ."  Condicion: " i cells condiciones + @ >name count type
        cr ."  Accion: " i cells acciones + @ >name count type
    loop
;

\ Motor de inferencia
: ejecutar ( -- )
    cr ." Ejecutando el motor de inferencia..." cr
     num-reglas @ 0= if ." No hay reglas " exit then
    num-reglas @ 0 do
        \ Obtener las direcciones de las condiciones y acciones
        i cells condiciones + @ execute \ Evaluar condiciÃ³n
        if
            i cells acciones + @ execute \ Ejecutar acciÃ³n si la condiciÃ³n es verdadera
        else
            ." La condicion de la regla " i 1+ . ." no se cumple." cr
        then
    loop
;

\ ConfiguraciÃ³n inicial: pedir al usuario que programe las palabras condicionales y de acciones
: configurar ( -- )
    cr ." Configurando el sistema de reglas..." cr
    cr ." Programa antes las palabras condicionales (condicion1, condicion2, ...) que devuelven true o false."
    cr ." Tambien programa las palabras de accion (accion1, accion2, ...) que ejecutaran codigo especi­fico." cr
;

\ MenÃº interactivo para el sistema
: menuinici ( -- )
    begin
        cr ." Menu Principal:"
        cr ." 1. Configurar el sistema de reglas"
        cr ." 2. Registrar una nueva regla"
        cr ." 3. Mostrar reglas"
        cr ." 4. Ejecutar motor de inferencia"
        cr ." 5. Salir"
        cr ." Selecciona una opcion (1-5): "
        key
        case
            [char] 1 of configurar endof
            [char] 2 of registrar-regla endof
            [char] 3 of mostrar-reglas endof
            [char] 4 of ejecutar endof
            [char] 5 of exit endof
             cr ." Opcion invalida, intentalo de nuevo." cr
        endcase
    again
;


\ Ejemplo manual:

: condicion1 ( -- flag ) 30 40 > ; \ Ejemplo: Devuelve FALSE
: accion1 ( -- ) ." Accion 1 ejecutada." cr ;
: condicion2 ( -- flag ) 10 5 > ; \ Ejemplo: Devuelve TRUE
: accion2 ( -- ) ." Accion 2 ejecutada." cr ;

\ Iniciar el menu principal
menuinici




# Cómo Convertir Dirección y Longitud a Counted String en SwiftForth

En SwiftForth, puedes convertir una dirección y longitud de cadena (addr len) a un counted string (cadena con contador) de varias formas:

## Método 1: Usando la palabra `PLACE`

```forth
\ Sintaxis: addr len buffer PLACE
create mybuffer 256 allot
s" Hola Mundo" mybuffer place
```

Esto almacenará la cadena en mybuffer como counted string.

## Método 2: Creando dinámicamente

```forth
: >counted ( addr len -- c-addr )
  dup >r             \ Guardar longitud
  here over 1+ allot \ Reservar espacio (longitud + 1 byte para count)
  dup >r             \ Guardar dirección de retorno
  c!                 \ Almacenar longitud en primer byte
  r@ 1+              \ Dirección del área de datos
  swap move          \ Copiar los caracteres
  r>                 \ Recuperar dirección counted string
  r> drop            \ Limpiar pila de retorno
;

\ Uso:
s" Ejemplo" >counted
```

## Método 3: Usando `S,` (String comma)

```forth
: >counted ( addr len -- c-addr )
  here >r    \ Guardar dirección inicial
  s,         \ Almacenar como counted string
  r>         \ Recuperar dirección
;

\ Uso:
s" SwiftForth" >counted
```

## Verificación

Para verificar que funcionó:

```forth
s" Prueba" >counted count type
\ Debería imprimir: Prueba
```

## Notas importantes:

1. SwiftForth ya maneja internamente los strings como counted strings en muchos casos
2. El formato counted string usa el primer byte para la longitud (máximo 255 caracteres)
3. Para cadenas más largas, considera usar strings con doble contador o otros formatos

¿Necesitas alguna variación específica de estos métodos para tu aplicación en SwiftForth?